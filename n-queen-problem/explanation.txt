the n-queens algorithm is a classic problem in computer science and mathematics that involves placing N chess queens on an nxn chessboard so that no two queens threaten each other. 
this means that no two queens can share the same row, column, or diagonal.

one common method to solve the n-Queens problem is through backtracking. 
the idea is to place queens one by one in different columns, starting from the leftmost column. 
when placing a queen in a column, check for clashes with already placed queens. 
if no clashes are found, move to the next column and repeat the process. 
if a clash is found, backtrack and move the queen to the next possible row.

------------------------------------------------------------------------------------------------
// Global variable declaration
Declare a vector x of size 100, initialized to 0

// Function to check if placing a queen at board[row][col] is safe
Function isSafe(board, row, col, n):
    // Check the row on the left side
    For i from 0 to col - 1:
        If board[row][i] is 1:
            Return false

    // Check the upper diagonal on the left side
    For (i, j) from (row, col) to (0, 0):
        If board[i][j] is 1:
            Return false

    // Check the lower diagonal on the left side
    For (i, j) from (row, col) to (n-1, 0):
        If board[i][j] is 1:
            Return false

    Return true

// Utility function to solve the N-Queens problem
Function solveNQUtil(board, col, n):
    // Base case: if all queens are placed
    If col is greater than or equal to n:
        // Print the solution
        For i from 0 to n - 1:
            For j from 0 to n - 1:
                Print board[i][j] with a space
            Print a newline
        Print "-----------------"
        Return true

    // Try placing a queen in all rows one by one
    For i from 0 to n - 1:
        // Check if it's safe to place the queen
        If isSafe(board, i, col, n) is true:
            // Place the queen
            board[i][col] = 1

            // Recur to place rest of the queens
            solveNQUtil(board, col + 1, n)

            // If placing queen in board[i][col] doesn't lead to a solution,
            // then remove the queen (backtrack)
            board[i][col] = 0

    Return false

// Function to initiate the N-Queens problem solver
Function solveNQ(n):
    // Initialize the board with zeros
    Declare a 2D array board of size 100x100, initialized to 0

    // Call the utility function to solve the problem
    solveNQUtil(board, 0, n)

// Main function
Function main():
    Declare n 
    Call solveNQ(n)
    Return 0
